basePath: /api
definitions:
  dto.CreateSubscriptionRequest:
    properties:
      allergies:
        items:
          type: string
        type: array
      delivery_days:
        items:
          type: string
        minItems: 1
        type: array
      mealtype:
        items:
          type: string
        minItems: 1
        type: array
      name:
        type: string
      phone_number:
        type: string
      plan_id:
        type: string
    required:
    - allergies
    - delivery_days
    - mealtype
    - name
    - phone_number
    - plan_id
    type: object
  dto.GetSubscriptionResponse:
    properties:
      allergies:
        items:
          type: string
        type: array
      created_at:
        type: string
      delivery_days:
        items:
          type: string
        type: array
      id:
        type: string
      mealtype:
        items:
          type: string
        type: array
      name:
        type: string
      pause_end_date:
        type: string
      pause_start_date:
        type: string
      phone_number:
        type: string
      plan:
        $ref: '#/definitions/entity.Plans'
      plan_id:
        type: string
      status:
        type: string
      total_price:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.GetUserResponse'
      user_id:
        type: string
    type: object
  dto.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
      userId:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 15
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.SessionResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.TestimonialRequest:
    properties:
      message:
        type: string
      name:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: number
    required:
    - message
    - name
    - rating
    type: object
  dto.UpdatePlansRequest:
    properties:
      features:
        type: string
      name:
        type: string
      price:
        minimum: 1
        type: number
      slogan:
        type: string
    type: object
  dto.UpdateSubscriptionRequest:
    properties:
      name:
        type: string
      pause_end_date:
        example: 30-06-2025
        type: string
      pause_start_date:
        example: 27-06-2025
        type: string
      phone_number:
        type: string
      status:
        enum:
        - ACTIVE
        - CANCELLED
        type: string
    type: object
  entity.Plans:
    properties:
      created_at:
        type: string
      features:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      slogan:
        type: string
      updated_at:
        type: string
    type: object
  models.JSONResponseModel:
    properties:
      data: {}
      errors: {}
      message:
        type: string
    type: object
info:
  contact:
    email: jmcb1602@gmail.com
    name: Jevon Mozart
  description: This is an API for SEA Catering application.
  title: SEA Catering API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      summary: Login as User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      summary: Register as User
      tags:
      - Auth
  /auth/session:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Get User Session
      tags:
      - Auth
  /plans:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Plans'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      summary: Get All Meal Plans
      tags:
      - Plans
  /plans/{plansId}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Plans ID
        in: path
        name: plansId
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePlansRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Update a Testimonial
      tags:
      - Plans
  /subscriptions:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GetSubscriptionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Get All My Subscriptions
      tags:
      - Subscription
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Create Subscription
      tags:
      - Subscription
  /subscriptions/{subscriptionId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Subscription ID
        in: path
        name: subscriptionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetSubscriptionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Get Spesicfic Subscription
      tags:
      - Subscription
    put:
      consumes:
      - application/json
      parameters:
      - description: Subscription ID
        in: path
        name: subscriptionId
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      security:
      - BearerAuth: []
      summary: Update Subscription
      tags:
      - Subscription
  /testimonials:
    get:
      consumes:
      - application/json
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      summary: Get Testimonial
      tags:
      - Testimonial
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TestimonialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONResponseModel'
      summary: Create a new Testimonial
      tags:
      - Testimonial
securityDefinitions:
  BearerAuth:
    description: 'Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
